import { HttpInterceptorFn } from '@angular/common/http';

/**
 * Auth Interceptor - Inyecta el JWT en cada petici√≥n
 *
 * CONCEPTO: Esto es como un middleware en NestJS que se ejecuta ANTES de cada petici√≥n HTTP.
 *
 * ANALOG√çA BACKEND:
 * En NestJS tienes interceptores que modifican requests/responses autom√°ticamente.
 * Este hace lo mismo pero en el frontend:
 *
 * Backend (NestJS):
 *   Request ‚Üí JwtAuthGuard (lee Authorization header) ‚Üí Controller
 *
 * Frontend (Angular):
 *   Request ‚Üí authInterceptor (AGREGA Authorization header) ‚Üí Backend
 *
 * FLUJO:
 * 1. Componente hace: http.get('/products')
 * 2. authInterceptor intercepta la petici√≥n
 * 3. Lee el accessToken de localStorage
 * 4. Clona la petici√≥n y agrega: Authorization: Bearer <token>
 * 5. Env√≠a la petici√≥n modificada al backend
 * 6. Backend valida el token con JwtAuthGuard
 *
 * NOTA: HttpInterceptorFn es la nueva forma de crear interceptors en Angular (funcional)
 * Antes se usaban clases, ahora funciones (m√°s simple)
 */
export const authInterceptor: HttpInterceptorFn = (req, next) => {
  // Leer el token de localStorage
  const token = localStorage.getItem('accessToken');

  // Si no hay token, enviar la petici√≥n sin modificar
  if (!token) {
    return next(req);
  }

  // Clonar la petici√≥n y agregar el header Authorization
  // IMPORTANTE: Las peticiones HTTP son inmutables, no se pueden modificar directamente
  // Por eso usamos clone() (similar a Object.assign() o spread operator)
  const clonedRequest = req.clone({
    setHeaders: {
      Authorization: `Bearer ${token}`  // ‚≠ê Tu backend espera este formato
    },
    withCredentials: true  // ‚≠ê CR√çTICO: Incluir cookies httpOnly en cada petici√≥n
  });

  // Pasar la petici√≥n modificada al siguiente interceptor o al servidor
  return next(clonedRequest);
};

/**
 * DEBUGGING TIP:
 * Si quieres ver qu√© peticiones est√°n siendo interceptadas:
 *
 * console.log('üîê Interceptor:', req.url, token ? '‚úÖ Token agregado' : '‚ö†Ô∏è Sin token');
 */
